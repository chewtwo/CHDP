136 202 53 283
122 49 1426 876


*****************************************************************************************************
#136 Single Number
*****************************************************************************************************
Easy

Given a non-empty array of integers nums, every element appears twice except for one. Find that single one.

You must implement a solution with a linear runtime complexity and use only constant extra space.

 

Example 1:

Input: nums = [2,2,1]
Output: 1
Example 2:

Input: nums = [4,1,2,1,2]
Output: 4
Example 3:

Input: nums = [1]
Output: 1


Constraints:
1 <= nums.length <= 3 * 10^4
-3 * 10^4 <= nums[i] <= 3 * 10^4
Each element in the array appears twice except for one element which appears only once.

Similar Questions:
Single Number II
Medium
Single Number III
Medium
Missing Number
Easy
Find the Duplicate Number
Medium
Find the Difference
Easy

Hints:
Empty

************************
* Templates            *
************************
c++
----------------
class Solution {
public:
    int singleNumber(vector<int>& nums) {
        
    }
};
--------------------------------
java
----------------
class Solution {
    public int singleNumber(int[] nums) {
        
    }
}
--------------------------------
python3
----------------
class Solution:
    def singleNumber(self, nums: List[int]) -> int:
--------------------------------

************************
* Solutions - en       *
************************
en - open/sbcb/lock/empty
en - lock
----------------
Approach 1: xxx
**********
* c++    *
**********
* java   *
**********
* py3    *
**********
xxx
----------------
Complexity Analysis
Time complexity: O(logN).
Space complexity: O(1).

================================
Approach 2: xxx


************************
* Solutions - cn       *
************************
cn - open/empty
cn - open
----------------
Approach 1: 位运算
**********
* c++    *
**********
class Solution {
public:
    int singleNumber(vector<int>& nums) {
        int ret = 0;
        for (auto e: nums) ret ^= e;
        return ret;
    }
};

**********
* java   *
**********
class Solution {
    public int singleNumber(int[] nums) {
        int single = 0;
        for (int num : nums) {
            single ^= num;
        }
        return single;
    }
}

**********
* py3    *
**********
class Solution:
    def singleNumber(self, nums: List[int]) -> int:
        return reduce(lambda x, y: x ^ y, nums)

----------------
Complexity Analysis
Time complexity: O(n).
Space complexity: O(1).
----------------
(end)
